import cv2
import os
import time
import datetime
import threading

# SETTINGS
FPS = 8
FRAME_INTERVAL = 1.0 / FPS
WIDTH, HEIGHT = 1280, 720  # Try 640x480 if too chunky
CODEC = cv2.VideoWriter_fourcc(*'MJPG')  # or *'XVID'
INTERVAL_SECONDS = 1800  # 30 min clips
BASE_OUTPUT_DIR = "/home/summerfieldwork/Main/savedrecordings"

# CAMERA CONFIG
CAM_DEVICE_MAP = {
    1: 0,  # Camera 1 -> /dev/video0
    2: 2   # Camera 2 -> /dev/video2
}

def get_output_filename(label):
    folder = os.path.join(BASE_OUTPUT_DIR, f"cam{label}")
    os.makedirs(folder, exist_ok=True)
    ts = datetime.datetime.now().strftime('%Y-%m-%d_%H-%M-%S')
    return os.path.join(folder, f"recording_cam{label}_{ts}.avi")

def record_camera(label, device_index):
    cap = cv2.VideoCapture(device_index)
    cap.set(cv2.CAP_PROP_FOURCC, CODEC)
    cap.set(cv2.CAP_PROP_FRAME_WIDTH, WIDTH)
    cap.set(cv2.CAP_PROP_FRAME_HEIGHT, HEIGHT)
    time.sleep(2)

    if not cap.isOpened():
        print(f"Camera {label} failed to open.")
        return

    filename = get_output_filename(label)
    out = cv2.VideoWriter(filename, CODEC, FPS, (WIDTH, HEIGHT))
    print(f"[CAM {label}] Recording started: {filename}")
    start_time = time.time()

    try:
        while True:
            loop_start = time.time()

            ret, frame = cap.read()
            if not ret:
                print(f"[CAM {label}] Frame grab failed.")
                break

            timestamp = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            cv2.putText(frame, f'Camera {label}', (10, 50), cv2.FONT_HERSHEY_SIMPLEX,
                        1, (0, 255, 0), 2, cv2.LINE_AA)
            cv2.putText(frame, timestamp, (10, HEIGHT - 20), cv2.FONT_HERSHEY_SIMPLEX,
                        0.7, (255, 255, 255), 2, cv2.LINE_AA)

            out.write(frame)

            # Clip rotation
            if time.time() - start_time >= INTERVAL_SECONDS:
                out.release()
                filename = get_output_filename(label)
                out = cv2.VideoWriter(filename, CODEC, FPS, (WIDTH, HEIGHT))
                start_time = time.time()
                print(f"[CAM {label}] New clip started: {filename}")

            # Throttle FPS
            elapsed = time.time() - loop_start
            time.sleep(max(0, FRAME_INTERVAL - elapsed))

    except KeyboardInterrupt:
        print(f"[CAM {label}] Interrupted.")
    finally:
        cap.release()
        out.release()
        print(f"[CAM {label}] Recording stopped.")

# --- Run each camera in its own thread ---
threads = []
for label, device_index in CAM_DEVICE_MAP.items():
    t = threading.Thread(target=record_camera, args=(label, device_index))
    t.start()
    threads.append(t)

# Wait for all threads (this will block unless interrupted)
for t in threads:
    t.join()
